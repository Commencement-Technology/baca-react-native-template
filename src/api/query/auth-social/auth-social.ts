/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * API
 * API documentation for the starter-kit project in NestJS by BinarApps. The API allows management of users, sessions and offers various functions for logged in users. Contains examples of authentication, authorization, and CRUD for selected resources.
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, UseMutationOptions } from '@tanstack/react-query'

import { customInstance } from '../../axios/custom-instance'
import type { ErrorType, BodyType } from '../../axios/custom-instance'
import type {
  AuthAppleLoginDto,
  AuthEntity,
  AuthFacebookLoginDto,
  AuthGoogleLoginDto,
} from '../../types'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const authGoogleControllerLogin = (
  authGoogleLoginDto: BodyType<AuthGoogleLoginDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AuthEntity>(
    {
      url: `/api/v1/auth/google/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authGoogleLoginDto,
    },
    options
  )
}

export const getAuthGoogleControllerLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authGoogleControllerLogin>>,
    TError,
    { data: BodyType<AuthGoogleLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authGoogleControllerLogin>>,
  TError,
  { data: BodyType<AuthGoogleLoginDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authGoogleControllerLogin>>,
    { data: BodyType<AuthGoogleLoginDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authGoogleControllerLogin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthGoogleControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authGoogleControllerLogin>>
>
export type AuthGoogleControllerLoginMutationBody = BodyType<AuthGoogleLoginDto>
export type AuthGoogleControllerLoginMutationError = ErrorType<unknown>

export const useAuthGoogleControllerLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authGoogleControllerLogin>>,
    TError,
    { data: BodyType<AuthGoogleLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const mutationOptions = getAuthGoogleControllerLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
export const authFacebookControllerLogin = (
  authFacebookLoginDto: BodyType<AuthFacebookLoginDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AuthEntity>(
    {
      url: `/api/v1/auth/facebook/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authFacebookLoginDto,
    },
    options
  )
}

export const getAuthFacebookControllerLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authFacebookControllerLogin>>,
    TError,
    { data: BodyType<AuthFacebookLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authFacebookControllerLogin>>,
  TError,
  { data: BodyType<AuthFacebookLoginDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authFacebookControllerLogin>>,
    { data: BodyType<AuthFacebookLoginDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authFacebookControllerLogin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthFacebookControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authFacebookControllerLogin>>
>
export type AuthFacebookControllerLoginMutationBody = BodyType<AuthFacebookLoginDto>
export type AuthFacebookControllerLoginMutationError = ErrorType<unknown>

export const useAuthFacebookControllerLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authFacebookControllerLogin>>,
    TError,
    { data: BodyType<AuthFacebookLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const mutationOptions = getAuthFacebookControllerLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
export const authAppleControllerLogin = (
  authAppleLoginDto: BodyType<AuthAppleLoginDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AuthEntity>(
    {
      url: `/api/v1/auth/apple/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authAppleLoginDto,
    },
    options
  )
}

export const getAuthAppleControllerLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authAppleControllerLogin>>,
    TError,
    { data: BodyType<AuthAppleLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authAppleControllerLogin>>,
  TError,
  { data: BodyType<AuthAppleLoginDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authAppleControllerLogin>>,
    { data: BodyType<AuthAppleLoginDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authAppleControllerLogin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthAppleControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authAppleControllerLogin>>
>
export type AuthAppleControllerLoginMutationBody = BodyType<AuthAppleLoginDto>
export type AuthAppleControllerLoginMutationError = ErrorType<unknown>

export const useAuthAppleControllerLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authAppleControllerLogin>>,
    TError,
    { data: BodyType<AuthAppleLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const mutationOptions = getAuthAppleControllerLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
